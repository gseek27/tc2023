{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_textarea = _resolveComponent(\"v-textarea\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_v_textarea, {\n    modelValue: $data.tweetContent,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.tweetContent = $event),\n    placeholder: \"What is happening?!\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"input\", {\n    type: \"file\",\n    accept: \"image/*,video/*,.gif\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.onFileChange && $options.onFileChange(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _createVNode(_component_v_btn, {\n    onClick: $options.postTweet\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Post\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_v_textarea","$data","tweetContent","$event","placeholder","_createElementVNode","type","accept","onChange","_cache","args","$options","onFileChange","_component_v_btn","onClick","postTweet"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <div>\n    <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n    <input type=\"file\" accept=\"image/*,video/*,.gif\" @change=\"onFileChange\">\n    <v-btn @click=\"postTweet\">Post</v-btn>\n  </div>\n</template>\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection } from 'firebase/firestore';  // <-- Import FieldValue\nimport { serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\"; // adjust the path according to your project structure\n\n/*\nconst firebaseConfig = {\n\n    apiKey: \"AIzaSyAxG3LGCtQHwZLxIxvFoaplouY5HlNU6JM\",\n  \n    authDomain: \"tc2023-21859.firebaseapp.com\",\n  \n    projectId: \"tc2023-21859\",\n  \n    storageBucket: \"tc2023-21859.appspot.com\",\n  \n    messagingSenderId: \"960022654133\",\n  \n    appId: \"1:960022654133:web:79b8495bce163d7f3322fc\",\n  \n    measurementId: \"G-589259DH29\"\n  \n  };\n  */\n\n\n\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetImage: null\n    };\n  },\n  methods: { \n    async postTweet() {\n      try {\n          if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          const imageUrl = await getDownloadURL(imageRef);\n\n\n        await addDoc(collection(db, \"tweets\"), {\n          content: this.tweetContent,\n          timestamp: serverTimestamp(), // to add a server-generated timestamp\n          imageUrl\n        });\n        } else {\n          await addDoc(collection(db, \"tweets\"), {\n            content: this.tweetContent,\n            timestamp: serverTimestamp()\n          });\n        }\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        this.fetchTweets(); \n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n        onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    }\n  }\n};\n</script>"],"mappings":";;;;uBACEA,mBAAA,CAIM,cAHJC,YAAA,CAAkFC,qBAAA;gBAA7DC,KAAA,CAAAC,YAAY;+DAAZD,KAAA,CAAAC,YAAY,GAAAC,MAAA;IAAEC,WAAW,EAAC;2CAC/CC,mBAAA,CAAwE;IAAjEC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,sBAAsB;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;qCACtEX,YAAA,CAAsCc,gBAAA;IAA9BC,OAAK,EAAEH,QAAA,CAAAI;EAAS;sBAAE,MAAI,C,iBAAJ,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}