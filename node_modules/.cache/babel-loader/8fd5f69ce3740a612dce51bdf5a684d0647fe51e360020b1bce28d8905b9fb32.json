{"ast":null,"code":"import SideBar from './SideBar.vue';\nimport TrendingPosts from './TrendingPosts.vue';\nimport WhoToFollow from './WhoToFollow.vue';\nimport TweetsList from './TweetsList.vue';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, getDocs, orderBy, query, doc, setDoc, getDoc } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nexport default {\n  name: 'ProfilePage',\n  components: {\n    SideBar,\n    TrendingPosts,\n    WhoToFollow,\n    TweetsList\n  },\n  data: () => ({\n    tweets: [],\n    loading: true,\n    tempUsername: '',\n    userID: null,\n    trendingTopics: [{\n      title: \"MLB\",\n      subtitle: \"2 hours ago\"\n    }, {\n      title: \"Anthony Davis\",\n      subtitle: \"1,032 posts\"\n    }],\n    usersToFollow: [{\n      name: \"AmazingAyo\"\n    }],\n    username: '',\n    // new data property for username\n    profileImage: '' // new data property for profile image link\n  }),\n\n  methods: {\n    async fetchUserProfile() {\n      const db = getFirestore();\n\n      // Check if userID is available\n      if (!this.userID) {\n        console.error(\"User ID is not available\");\n        this.loading = false;\n        return;\n      }\n      const userDocRef = doc(collection(db, \"users\"), this.userID); // Use the actual userID\n\n      const userDoc = await getDoc(userDocRef).then(doc => {\n        if (doc.exists) {\n          this.username = doc.data().username;\n          this.tempUsername = doc.data().username;\n          this.profileImage = doc.data().profileImage;\n        } else {\n          console.log(\"No such user!\");\n        }\n      }).catch(error => {\n        console.log(\"Error fetching user:\", error);\n      });\n      if (userDoc.exists()) {\n        this.username = userDoc.data().username;\n        this.tempUsername = userDoc.data().username;\n        this.profileImage = userDoc.data().profileImage;\n      }\n\n      // Set loading to false after fetching the profile (or realizing the profile doesn't exist)\n      this.loading = false;\n    },\n    removeTweet(tweetId) {\n      this.tweets = this.tweets.filter(tweet => tweet.id !== tweetId);\n    },\n    async fetchTweets() {\n      const db = getFirestore();\n      const tweetsCollection = collection(db, 'tweets');\n      const tweetsQuery = query(tweetsCollection, orderBy('timestamp', 'desc'));\n      const tweetDocs = await getDocs(tweetsQuery);\n      this.tweets = tweetDocs.docs.map(doc => {\n        return {\n          id: doc.id,\n          ...doc.data()\n        };\n      });\n      console.log(\"Fetched tweets in parent:\", this.tweets);\n    },\n    uploadImage(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.profileImage = file; // store the file in the data property\n      }\n    },\n\n    async uploadImageToStorage(file) {\n      const storage = getStorage();\n      const storageRef = ref(storage, 'profileImages/' + file.name); // create a reference in Firebase storage\n      await uploadBytes(storageRef, file); // upload the file to the reference\n      return await getDownloadURL(storageRef); // get the download URL\n    },\n\n    async updateProfile() {\n      if (this.profileImage && typeof this.profileImage !== 'string') {\n        const imageUrl = await this.uploadImageToStorage(this.profileImage);\n        this.profileImage = imageUrl; // set profileImage data property to the image link\n      }\n\n      const db = getFirestore();\n      const userDocRef = doc(collection(db, \"users\"), \"UserId\"); // replace 'yourUserId' with the id of the currently logged in user or a dynamic value\n\n      await setDoc(userDocRef, {\n        username: this.tempUsername,\n        profileImage: this.profileImage\n      }, {\n        merge: true\n      }); // this will merge the new data with existing, or create a new doc if doesn't exist\n      this.username = this.tempUsername; // Update the displayed username after saving to Firestore\n    }\n  },\n\n  mounted() {\n    this.fetchTweets();\n    const auth = getAuth();\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        this.userID = user.uid; // Set the userID data property\n        this.fetchUserProfile(); // Fetch the user profile\n      } else {\n        // User is not logged in\n        console.log(\"User is not authenticated\");\n        this.loading = false;\n      }\n    });\n  }\n};","map":{"version":3,"names":["SideBar","TrendingPosts","WhoToFollow","TweetsList","getAuth","onAuthStateChanged","getFirestore","collection","getDocs","orderBy","query","doc","setDoc","getDoc","getStorage","ref","uploadBytes","getDownloadURL","name","components","data","tweets","loading","tempUsername","userID","trendingTopics","title","subtitle","usersToFollow","username","profileImage","methods","fetchUserProfile","db","console","error","userDocRef","userDoc","then","exists","log","catch","removeTweet","tweetId","filter","tweet","id","fetchTweets","tweetsCollection","tweetsQuery","tweetDocs","docs","map","uploadImage","event","file","target","files","uploadImageToStorage","storage","storageRef","updateProfile","imageUrl","merge","mounted","auth","user","uid"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/Profile.vue"],"sourcesContent":["<template>\n  <div>\n\n  <v-row v-if=\"loading\">\n  <v-col class=\"text-center\">\n    Loading...\n  </v-col>\n</v-row>\n\n<!-- Your existing content wrapped in a v-else -->\n<v-row v-else>\n    <v-row>\n      <v-col cols=\"3\">\n        <SideBar />\n      </v-col>\n      <v-col cols=\"6\">\n        <h1>Your profile page</h1>\n\n        <!-- Profile Picture -->\n        <img :src=\"profileImage\" alt=\"Profile\" width=\"100\" v-if=\"profileImage\"/>\n        <input type=\"file\" @change=\"uploadImage\" />\n\n        <!-- Username -->\n        <p>@{{ username }}</p>\n<input v-model=\"tempUsername\" placeholder=\"Choose a username\" />\n\n        <!-- Submit Button -->\n        <button @click=\"updateProfile\">Update Profile</button>\n\n        <TweetsList :tweets=\"tweets\" @removeTweet=\"removeTweet\" />\n      </v-col>\n\n      <v-col cols=\"3\">\n        <TrendingPosts :topics=\"trendingTopics\" class=\"sideB\" />\n        <WhoToFollow :users=\"usersToFollow\" class=\"sideB\" />\n      </v-col>\n    </v-row>\n\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport SideBar from './SideBar.vue';\nimport TrendingPosts from './TrendingPosts.vue';\nimport WhoToFollow from './WhoToFollow.vue';\nimport TweetsList from './TweetsList.vue';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, getDocs, orderBy, query, doc, setDoc, getDoc } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\n\nexport default {\n  name: 'ProfilePage',\n  components: {\n    SideBar,\n    TrendingPosts,\n    WhoToFollow,\n    TweetsList\n  },\n  data: () => ({\n    tweets: [],\n    loading: true,\n    tempUsername: '', \n     userID: null,\n    trendingTopics: [\n      { title: \"MLB\", subtitle: \"2 hours ago\" },\n      { title: \"Anthony Davis\", subtitle: \"1,032 posts\" }\n    ],\n    usersToFollow: [\n      { name: \"AmazingAyo\" }\n    ],\n    username: '', // new data property for username\n    profileImage: '' // new data property for profile image link\n  }),\n  methods: {\n    async fetchUserProfile() {\n    const db = getFirestore();\n\n    // Check if userID is available\n    if (!this.userID) {\n        console.error(\"User ID is not available\");\n        this.loading = false;\n        return;\n    }\n\n    const userDocRef = doc(collection(db, \"users\"), this.userID); // Use the actual userID\n\n    const userDoc = await getDoc(userDocRef)\n.then(doc => {\n   if (doc.exists) {\n      this.username = doc.data().username;\n      this.tempUsername = doc.data().username;\n      this.profileImage = doc.data().profileImage;\n   } else {\n      console.log(\"No such user!\");\n   }\n})\n.catch(error => {\n   console.log(\"Error fetching user:\", error);\n});\n    if (userDoc.exists()) {\n        this.username = userDoc.data().username;\n        this.tempUsername = userDoc.data().username;\n        this.profileImage = userDoc.data().profileImage;\n    }\n\n    // Set loading to false after fetching the profile (or realizing the profile doesn't exist)\n    this.loading = false;\n},\n    removeTweet(tweetId) {\n      this.tweets = this.tweets.filter(tweet => tweet.id !== tweetId);\n    },\n    async fetchTweets() {\n      const db = getFirestore();\n      const tweetsCollection = collection(db, 'tweets');\n      const tweetsQuery = query(tweetsCollection, orderBy('timestamp', 'desc')); \n      const tweetDocs = await getDocs(tweetsQuery);\n\n      this.tweets = tweetDocs.docs.map(doc => {\n        return {\n          id: doc.id,\n          ...doc.data()\n        };\n      });\n      console.log(\"Fetched tweets in parent:\", this.tweets);\n    },\n    uploadImage(event) {\n    const file = event.target.files[0];\n    if (file) {\n        this.profileImage = file; // store the file in the data property\n    }\n},\n     async uploadImageToStorage(file) {\n        const storage = getStorage();\n        const storageRef = ref(storage, 'profileImages/' + file.name); // create a reference in Firebase storage\n        await uploadBytes(storageRef, file); // upload the file to the reference\n        return await getDownloadURL(storageRef); // get the download URL\n    },\n\n    async updateProfile() {\n        if (this.profileImage && typeof this.profileImage !== 'string') {\n            const imageUrl = await this.uploadImageToStorage(this.profileImage);\n            this.profileImage = imageUrl; // set profileImage data property to the image link\n        }\n\n        const db = getFirestore();\n        const userDocRef = doc(collection(db, \"users\"), \"UserId\"); // replace 'yourUserId' with the id of the currently logged in user or a dynamic value\n\n        await setDoc(userDocRef, {\n            username: this.tempUsername,\n            profileImage: this.profileImage\n        }, { merge: true }); // this will merge the new data with existing, or create a new doc if doesn't exist\n        this.username = this.tempUsername; // Update the displayed username after saving to Firestore\n    }\n  },\nmounted() {\n    this.fetchTweets();\n\n    const auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n        if (user) {\n            this.userID = user.uid; // Set the userID data property\n            this.fetchUserProfile(); // Fetch the user profile\n        } else {\n            // User is not logged in\n            console.log(\"User is not authenticated\");\n            this.loading = false;\n        }\n    });\n}\n}\n</script>\n\n<style scoped>\n.sideB {\n  margin-bottom: 30px;\n  border: 1px solid #e0e0e0;\n  padding: 0px 10px;\n  margin-top: 0px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}