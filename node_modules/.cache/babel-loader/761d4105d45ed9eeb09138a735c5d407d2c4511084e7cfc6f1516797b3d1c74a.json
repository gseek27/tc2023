{"ast":null,"code":"import { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, doc, getDoc, updateDoc, query, orderBy, getDocs, where } from 'firebase/firestore';\nimport SideBar from './SideBar.vue';\nimport TrendingPosts from './TrendingPosts.vue';\nimport WhoToFollow from './WhoToFollow.vue';\nimport TweetsList from './TweetsList.vue';\nexport default {\n  components: {\n    SideBar,\n    TrendingPosts,\n    WhoToFollow,\n    TweetsList\n  },\n  name: 'ProfilePage',\n  data() {\n    return {\n      tweets: [],\n      loading: true,\n      userID: null,\n      username: '',\n      tempUsername: '',\n      profileImage: '',\n      trendingTopics: [{\n        title: 'MLB',\n        subtitle: '2 hours ago'\n      }, {\n        title: 'Anthony Davis',\n        subtitle: '1,032 posts'\n      }],\n      usersToFollow: [{\n        name: 'AmazingAyo'\n      }]\n    };\n  },\n  methods: {\n    async updateProfile() {\n      const db = getFirestore();\n      const userDocRef = doc(db, 'users', this.userID);\n\n      // Update the username in Firestore\n      await updateDoc(userDocRef, {\n        username: this.tempUsername\n      });\n\n      // Update the local username property\n      this.username = this.tempUsername;\n    },\n    async fetchUserProfile(userId) {\n      const db = getFirestore();\n      const userDocRef = doc(db, 'users', userId); // Adjust the path as needed\n      const userProfile = await getDoc(userDocRef);\n      if (userProfile.exists()) {\n        this.username = userProfile.data().username || ''; // Handle undefined username\n        this.profileImage = userProfile.data().profileImage || ''; // Handle undefined profileImage\n      } else {\n        console.error('User profile does not exist:', userId);\n      }\n    },\n    async fetchTweets() {\n      const db = getFirestore();\n      const tweetsCollection = collection(db, 'tweets');\n      const tweetsQuery = query(tweetsCollection, where('userId', '==', this.userID),\n      // Filter tweets by user ID\n      orderBy('timestamp', 'desc'));\n      const tweetDocs = await getDocs(tweetsQuery);\n      this.tweets = tweetDocs.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('Fetched tweets in parent:', this.tweets);\n    }\n  },\n  mounted() {\n    const auth = getAuth();\n    onAuthStateChanged(auth, async user => {\n      if (user) {\n        this.userID = user.uid;\n\n        // Fetch user profile and tweets\n        await this.fetchUserProfile(user.uid);\n        this.fetchTweets();\n        this.loading = false;\n      } else {\n        this.loading = false;\n        console.log('User is not authenticated');\n      }\n    });\n  }\n};","map":{"version":3,"names":["getAuth","onAuthStateChanged","getFirestore","collection","doc","getDoc","updateDoc","query","orderBy","getDocs","where","SideBar","TrendingPosts","WhoToFollow","TweetsList","components","name","data","tweets","loading","userID","username","tempUsername","profileImage","trendingTopics","title","subtitle","usersToFollow","methods","updateProfile","db","userDocRef","fetchUserProfile","userId","userProfile","exists","console","error","fetchTweets","tweetsCollection","tweetsQuery","tweetDocs","docs","map","id","log","mounted","auth","user","uid"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/Profile.vue"],"sourcesContent":["<template>\n  <div>\n    <v-row v-if=\"loading\">\n      <v-col class=\"text-center\">\n        Loading...\n      </v-col>\n    </v-row>\n\n    <!-- Your existing content wrapped in a v-else -->\n    <v-row v-else>\n      <v-row>\n        <v-col cols=\"3\">\n          <SideBar />\n        </v-col>\n        <v-col cols=\"6\">\n          <h1>Your profile page</h1>\n\n          <!-- Profile Picture -->\n           <v-avatar v-if=\"profileImage\">\n            <img :src=\"profileImage\" alt=\"Profile\" width=\"100\" />\n          </v-avatar>\n          <label>\n            <v-icon>mdi-image</v-icon>\n            <input type=\"file\" @change=\"onFileChange\" style=\"display: none;\">\n          </label>\n\n\n          <!-- Username -->\n          <p>@{{ username }}</p>\n          <input v-model=\"tempUsername\" placeholder=\"Choose a username\" />\n\n          <!-- Submit Button -->\n          <button @click=\"updateProfile\">Update Profile</button>\n\n          <TweetsList :tweets=\"tweets\" @removeTweet=\"removeTweet\" />\n        </v-col>\n\n        <v-col cols=\"3\">\n          <TrendingPosts :topics=\"trendingTopics\" class=\"sideB\" />\n          <WhoToFollow :users=\"usersToFollow\" class=\"sideB\" />\n        </v-col>\n      </v-row>\n    </v-row>\n  </div>\n</template>\n\n\n<script>\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, doc, getDoc, updateDoc, query, orderBy, getDocs, where } from 'firebase/firestore';\n\n\nimport SideBar from './SideBar.vue';\nimport TrendingPosts from './TrendingPosts.vue';\nimport WhoToFollow from './WhoToFollow.vue';\nimport TweetsList from './TweetsList.vue';\n\n\n\n\n\nexport default {\n  components: {\n    SideBar,\n    TrendingPosts,\n    WhoToFollow,\n    TweetsList\n  },\n  name: 'ProfilePage',\n  data() {\n    return {\n      tweets: [],\n      loading: true,\n      userID: null,\n      username: '',\n       tempUsername: '',\n      profileImage: '',\n      trendingTopics: [\n        { title: 'MLB', subtitle: '2 hours ago' },\n        { title: 'Anthony Davis', subtitle: '1,032 posts' },\n      ],\n      usersToFollow: [{ name: 'AmazingAyo' }],\n    };\n  },\n  methods: {\n\n    async updateProfile() {\n        const db = getFirestore();\n        const userDocRef = doc(db, 'users', this.userID);\n\n        // Update the username in Firestore\n        await updateDoc(userDocRef, {\n            username: this.tempUsername\n        });\n\n        // Update the local username property\n        this.username = this.tempUsername;\n    },\n    async fetchUserProfile(userId) {\n      const db = getFirestore();\n      const userDocRef = doc(db, 'users', userId); // Adjust the path as needed\n      const userProfile = await getDoc(userDocRef);\n\n      if (userProfile.exists()) {\n        this.username = userProfile.data().username || ''; // Handle undefined username\n        this.profileImage = userProfile.data().profileImage || ''; // Handle undefined profileImage\n      } else {\n        console.error('User profile does not exist:', userId);\n      }\n    },\n  async fetchTweets() {\n  const db = getFirestore();\n  const tweetsCollection = collection(db, 'tweets');\n  const tweetsQuery = query(\n    tweetsCollection,\n    where('userId', '==', this.userID), // Filter tweets by user ID\n    orderBy('timestamp', 'desc')\n  );\n\n  const tweetDocs = await getDocs(tweetsQuery);\n  this.tweets = tweetDocs.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  }));\n  console.log('Fetched tweets in parent:', this.tweets);\n},\n\n  },\n  mounted() {\n    const auth = getAuth();\n    onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        this.userID = user.uid;\n\n        // Fetch user profile and tweets\n        await this.fetchUserProfile(user.uid);\n        this.fetchTweets();\n\n        this.loading = false;\n      } else {\n        this.loading = false;\n        console.log('User is not authenticated');\n      }\n    });\n  },\n};\n</script>\n\n\n\n<style scoped>\n.sideB {\n  margin-bottom: 30px;\n  border: 1px solid #e0e0e0;\n  padding: 0px 10px;\n  margin-top: 0px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}