{"ast":null,"code":"import { getStorage, ref as storageRef, uploadBytes } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '/src/firebase/index.js';\nimport { auth } from '/src/firebase/index.js';\nexport default {\n  data() {\n    return {\n      tweetContent: '',\n      tweetImage: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = auth.currentUser;\n        if (!user) throw new Error('User not authenticated');\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n        }\n        await this.createTweet(this.tweetContent, user);\n        this.tweetContent = ''; // Clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        // No need to call fetchTweets here as it's not defined in this component\n      } catch (error) {\n        console.error('Error posting tweet:', error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n    async createTweet(content, user) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: user.username || '' // Include the username from the user object\n      };\n\n      // Only add profileImage to tweet if it's defined\n      if (user.profileImage) {\n        tweet.profileImage = user.profileImage;\n      }\n      const tweetsCollection = collection(db, 'tweets');\n      await addDoc(tweetsCollection, tweet);\n    }\n  }\n};","map":{"version":3,"names":["getStorage","ref","storageRef","uploadBytes","collection","addDoc","serverTimestamp","db","auth","data","tweetContent","tweetImage","methods","postTweet","user","currentUser","Error","storage","imageRef","name","createTweet","$emit","error","console","onFileChange","e","file","target","files","content","tweet","timestamp","userId","uid","username","profileImage","tweetsCollection"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <v-row>\n    <!-- This column will take the majority of the space -->\n    <v-col cols=\"12\">\n      <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n    </v-col>\n  </v-row>\n\n  <v-row>\n    <v-col cols=\"10\">\n      <!-- Upload icon triggering the file input -->\n      <label>\n        <v-icon>mdi-image</v-icon>\n        <input type=\"file\" @change=\"onFileChange\" style=\"display: none;\">\n      </label>\n    </v-col>\n\n    <!-- This column will be for the Post button -->\n    <v-col cols=\"1\" class=\"text-end\">\n      <v-btn @click=\"postTweet\">Post</v-btn>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '/src/firebase/index.js';\nimport { auth } from '/src/firebase/index.js';\n\nexport default {\n  data() {\n    return {\n      tweetContent: '',\n      tweetImage: null,\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = auth.currentUser;\n        if (!user) throw new Error('User not authenticated');\n\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n        }\n\n        await this.createTweet(this.tweetContent, user);\n        this.tweetContent = ''; // Clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        // No need to call fetchTweets here as it's not defined in this component\n      } catch (error) {\n        console.error('Error posting tweet:', error);\n      }\n    },\n\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n\n    async createTweet(content, user) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: user.username || '', // Include the username from the user object\n      };\n\n      // Only add profileImage to tweet if it's defined\n      if (user.profileImage) {\n        tweet.profileImage = user.profileImage;\n      }\n\n      const tweetsCollection = collection(db, 'tweets');\n      await addDoc(tweetsCollection, tweet);\n    },\n  },\n};\n</script>\n"],"mappings":"AAyBA,SAASA,UAAU,EAAEC,GAAE,IAAKC,UAAU,EAAEC,WAAU,QAAS,kBAAkB;AAC7E,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAc,QAAS,oBAAoB;AACxE,SAASC,EAAC,QAAS,wBAAwB;AAC3C,SAASC,IAAG,QAAS,wBAAwB;AAE7C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAMC,IAAG,GAAIN,IAAI,CAACO,WAAW;QAC7B,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;QAEpD,IAAI,IAAI,CAACL,UAAU,EAAE;UACnB,MAAMM,OAAM,GAAIjB,UAAU,CAAC,CAAC;UAC5B,MAAMkB,QAAO,GAAIhB,UAAU,CAACe,OAAO,EAAE,SAAQ,GAAI,IAAI,CAACN,UAAU,CAACQ,IAAI,CAAC;UACtE,MAAMhB,WAAW,CAACe,QAAQ,EAAE,IAAI,CAACP,UAAU,CAAC;QAC9C;QAEA,MAAM,IAAI,CAACS,WAAW,CAAC,IAAI,CAACV,YAAY,EAAEI,IAAI,CAAC;QAC/C,IAAI,CAACJ,YAAW,GAAI,EAAE,EAAE;QACxB,IAAI,CAACC,UAAS,GAAI,IAAI;QACtB,IAAI,CAACU,KAAK,CAAC,aAAa,CAAC;QACzB;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDE,YAAYA,CAACC,CAAC,EAAE;MACd,MAAMC,IAAG,GAAID,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAIF,IAAI,EAAE;QACR,IAAI,CAACf,UAAS,GAAIe,IAAI;MACxB;IACF,CAAC;IAED,MAAMN,WAAWA,CAACS,OAAO,EAAEf,IAAI,EAAE;MAC/B,MAAMgB,KAAI,GAAI;QACZD,OAAO,EAAEA,OAAO;QAChBE,SAAS,EAAEzB,eAAe,CAAC,CAAC;QAC5B0B,MAAM,EAAElB,IAAI,CAACmB,GAAG;QAChBC,QAAQ,EAAEpB,IAAI,CAACoB,QAAO,IAAK,EAAE,CAAE;MACjC,CAAC;;MAED;MACA,IAAIpB,IAAI,CAACqB,YAAY,EAAE;QACrBL,KAAK,CAACK,YAAW,GAAIrB,IAAI,CAACqB,YAAY;MACxC;MAEA,MAAMC,gBAAe,GAAIhC,UAAU,CAACG,EAAE,EAAE,QAAQ,CAAC;MACjD,MAAMF,MAAM,CAAC+B,gBAAgB,EAAEN,KAAK,CAAC;IACvC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}