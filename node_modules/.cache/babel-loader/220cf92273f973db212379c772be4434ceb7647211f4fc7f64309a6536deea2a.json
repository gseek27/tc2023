{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref } from \"vue\";\nimport { storage } from \"@/firebase\"; // assuming you've initialized firebase somewhere\n\nexport default {\n  name: \"TweetBox\",\n  setup() {\n    const mediaInput = ref(null);\n    const tweetImage = ref(null);\n    const mediaType = ref(null);\n    const hoverTextVisible = ref(false);\n    const tweetContent = ref(\"\");\n    const showHoverText = () => hoverTextVisible.value = true;\n    const hideHoverText = () => hoverTextVisible.value = false;\n    const previewMedia = event => {\n      const file = event.target.files[0];\n      if (file) {\n        if (file.type.startsWith(\"image\")) {\n          mediaType.value = \"image\";\n        } else if (file.type.startsWith(\"video\")) {\n          mediaType.value = \"video\";\n        } else if (file.name.endsWith(\".gif\")) {\n          mediaType.value = \"gif\";\n        }\n        tweetImage.value = URL.createObjectURL(file);\n      }\n    };\n    const uploadPost = async () => {\n      if (!tweetContent.value && !mediaInput.value.files[0]) {\n        alert(\"Please add some content or media before posting!\");\n        return;\n      }\n\n      // If there's media to be uploaded\n      const file = mediaInput.value.files[0];\n      if (file) {\n        const storageRef = storage.ref();\n        const mediaRef = storageRef.child(`media/${file.name}`);\n        try {\n          await mediaRef.put(file);\n          alert(\"Media uploaded successfully\");\n          // If you need the URL of the uploaded media\n          // const uploadedURL = await mediaRef.getDownloadURL();\n        } catch (error) {\n          console.error(\"Error uploading media:\", error);\n          alert(\"Failed to upload media\");\n        }\n      }\n\n      // Resetting for the next post\n      tweetContent.value = \"\";\n      tweetImage.value = null;\n      mediaType.value = null;\n    };\n    return {\n      mediaInput,\n      tweetImage,\n      mediaType,\n      hoverTextVisible,\n      tweetContent,\n      showHoverText,\n      hideHoverText,\n      previewMedia,\n      uploadPost\n    };\n  }\n};","map":{"version":3,"names":["ref","storage","name","setup","mediaInput","tweetImage","mediaType","hoverTextVisible","tweetContent","showHoverText","value","hideHoverText","previewMedia","event","file","target","files","type","startsWith","endsWith","URL","createObjectURL","uploadPost","alert","storageRef","mediaRef","child","put","error","console"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- Textarea for posting content -->\n    <textarea v-model=\"tweetContent\" placeholder=\"What's happening?\"></textarea>\n    \n    <!-- Icon for media selection -->\n    <label>\n      <i class=\"fa fa-picture-o\" @mouseover=\"showHoverText\" @mouseout=\"hideHoverText\"></i>\n      <span v-if=\"hoverTextVisible\">Media</span>\n      <input type=\"file\" @change=\"previewMedia\" ref=\"mediaInput\" accept=\"image/*,video/*,.gif\" style=\"display: none;\" />\n    </label>\n\n    <!-- Image preview -->\n    <img v-if=\"mediaType === 'image'\" :src=\"tweetImage\" alt=\"Selected Media\" />\n\n    <!-- Video/GIF preview -->\n    <video v-if=\"mediaType === 'video' || mediaType === 'gif'\" controls :src=\"tweetImage\"></video>\n\n    <button @click=\"uploadPost\">Post</button>\n  </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nimport { storage } from \"@/firebase\"; // assuming you've initialized firebase somewhere\n\nexport default {\n  name: \"TweetBox\",\n  setup() {\n    const mediaInput = ref(null);\n    const tweetImage = ref(null);\n    const mediaType = ref(null);\n    const hoverTextVisible = ref(false);\n    const tweetContent = ref(\"\");\n\n    const showHoverText = () => hoverTextVisible.value = true;\n    const hideHoverText = () => hoverTextVisible.value = false;\n\n    const previewMedia = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        if (file.type.startsWith(\"image\")) {\n          mediaType.value = \"image\";\n        } else if (file.type.startsWith(\"video\")) {\n          mediaType.value = \"video\";\n        } else if (file.name.endsWith(\".gif\")) {\n          mediaType.value = \"gif\";\n        }\n        tweetImage.value = URL.createObjectURL(file);\n      }\n    };\n\n    const uploadPost = async () => {\n      if (!tweetContent.value && !mediaInput.value.files[0]) {\n        alert(\"Please add some content or media before posting!\");\n        return;\n      }\n\n      // If there's media to be uploaded\n      const file = mediaInput.value.files[0];\n      if (file) {\n        const storageRef = storage.ref();\n        const mediaRef = storageRef.child(`media/${file.name}`);\n\n        try {\n          await mediaRef.put(file);\n          alert(\"Media uploaded successfully\");\n          // If you need the URL of the uploaded media\n          // const uploadedURL = await mediaRef.getDownloadURL();\n        } catch (error) {\n          console.error(\"Error uploading media:\", error);\n          alert(\"Failed to upload media\");\n        }\n      }\n\n      // Resetting for the next post\n      tweetContent.value = \"\";\n      tweetImage.value = null;\n      mediaType.value = null;\n    };\n\n    return {\n      mediaInput,\n      tweetImage,\n      mediaType,\n      hoverTextVisible,\n      tweetContent,\n      showHoverText,\n      hideHoverText,\n      previewMedia,\n      uploadPost\n    };\n  }\n};\n</script>\n\n<style scoped>\n/* You might need to style the textarea, icon, hover text, and other elements */\n</style>\n"],"mappings":";;;AAuBA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,OAAM,QAAS,YAAY,EAAE;;AAEtC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,UAAS,GAAIJ,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMK,UAAS,GAAIL,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMM,SAAQ,GAAIN,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMO,gBAAe,GAAIP,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMQ,YAAW,GAAIR,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMS,aAAY,GAAIA,CAAA,KAAMF,gBAAgB,CAACG,KAAI,GAAI,IAAI;IACzD,MAAMC,aAAY,GAAIA,CAAA,KAAMJ,gBAAgB,CAACG,KAAI,GAAI,KAAK;IAE1D,MAAME,YAAW,GAAKC,KAAK,IAAK;MAC9B,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACR,IAAIA,IAAI,CAACG,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;UACjCZ,SAAS,CAACI,KAAI,GAAI,OAAO;QAC3B,OAAO,IAAII,IAAI,CAACG,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;UACxCZ,SAAS,CAACI,KAAI,GAAI,OAAO;QAC3B,OAAO,IAAII,IAAI,CAACZ,IAAI,CAACiB,QAAQ,CAAC,MAAM,CAAC,EAAE;UACrCb,SAAS,CAACI,KAAI,GAAI,KAAK;QACzB;QACAL,UAAU,CAACK,KAAI,GAAIU,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;MAC9C;IACF,CAAC;IAED,MAAMQ,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI,CAACd,YAAY,CAACE,KAAI,IAAK,CAACN,UAAU,CAACM,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC,EAAE;QACrDO,KAAK,CAAC,kDAAkD,CAAC;QACzD;MACF;;MAEA;MACA,MAAMT,IAAG,GAAIV,UAAU,CAACM,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC;MACtC,IAAIF,IAAI,EAAE;QACR,MAAMU,UAAS,GAAIvB,OAAO,CAACD,GAAG,CAAC,CAAC;QAChC,MAAMyB,QAAO,GAAID,UAAU,CAACE,KAAK,CAAE,SAAQZ,IAAI,CAACZ,IAAK,EAAC,CAAC;QAEvD,IAAI;UACF,MAAMuB,QAAQ,CAACE,GAAG,CAACb,IAAI,CAAC;UACxBS,KAAK,CAAC,6BAA6B,CAAC;UACpC;UACA;QACF,EAAE,OAAOK,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;UAC9CL,KAAK,CAAC,wBAAwB,CAAC;QACjC;MACF;;MAEA;MACAf,YAAY,CAACE,KAAI,GAAI,EAAE;MACvBL,UAAU,CAACK,KAAI,GAAI,IAAI;MACvBJ,SAAS,CAACI,KAAI,GAAI,IAAI;IACxB,CAAC;IAED,OAAO;MACLN,UAAU;MACVC,UAAU;MACVC,SAAS;MACTC,gBAAgB;MAChBC,YAAY;MACZC,aAAa;MACbE,aAAa;MACbC,YAAY;MACZU;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}