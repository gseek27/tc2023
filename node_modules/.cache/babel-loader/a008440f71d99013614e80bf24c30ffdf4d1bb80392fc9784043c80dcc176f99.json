{"ast":null,"code":"import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\";\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetImage: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = firebase.auth().currentUser;\n        if (!user) throw new Error(\"User not authenticated\");\n        let imageUrl = null;\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          imageUrl = await getDownloadURL(imageRef);\n        }\n        await this.createTweet(this.tweetContent, user, imageUrl);\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        this.fetchTweets();\n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n    async createTweet(content, user, imageUrl = null) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: user.displayName || user.email,\n        // fallback to email if displayName doesn't exist\n        profileImage: user.profileImage,\n        imageUrl: imageUrl // Include the image URL if it exists\n      };\n\n      const tweetsCollection = collection(db, \"tweets\");\n      await addDoc(tweetsCollection, tweet);\n    }\n  }\n};","map":{"version":3,"names":["getStorage","ref","storageRef","uploadBytes","getDownloadURL","collection","addDoc","serverTimestamp","db","data","tweetContent","tweetImage","methods","postTweet","user","firebase","auth","currentUser","Error","imageUrl","storage","imageRef","name","createTweet","$emit","fetchTweets","error","console","onFileChange","e","file","target","files","content","tweet","timestamp","userId","uid","username","displayName","email","profileImage","tweetsCollection"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n<v-row>\n    <!-- This column will take the majority of the space -->\n    <v-col cols=\"12\">\n      <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n       </v-col>\n       </v-row>\n   \n       <v-row>\n       <v-col cols=\"10\">\n      <!-- Upload icon triggering the file input -->\n      <label>\n        <v-icon>mdi-image</v-icon>\n        <input type=\"file\" @change=\"onFileChange\" style=\"display: none;\">\n      </label>\n    </v-col>\n    \n    <!-- This column will be for the Post button -->\n    <v-col cols=\"1\" class=\"text-end\">\n      <v-btn @click=\"postTweet\">Post</v-btn>\n    </v-col>\n  </v-row>\n</template>\n\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\"; \n\n\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetImage: null,\n    };\n  },\n  methods: { \n    async postTweet() {\n      try {\n        const user = firebase.auth().currentUser;\n        if (!user) throw new Error(\"User not authenticated\");\n\n        let imageUrl = null;\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          imageUrl = await getDownloadURL(imageRef);\n        }\n        \n        await this.createTweet(this.tweetContent, user, imageUrl);\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        this.fetchTweets(); \n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n    async createTweet(content, user, imageUrl = null) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: user.displayName || user.email, // fallback to email if displayName doesn't exist\n        profileImage: user.profileImage, \n        imageUrl: imageUrl, // Include the image URL if it exists\n      };\n\n      const tweetsCollection = collection(db, \"tweets\");\n      await addDoc(tweetsCollection, tweet);\n    }\n  }\n};\n</script>"],"mappings":"AA0BA,SAASA,UAAU,EAAEC,GAAE,IAAKC,UAAU,EAAEC,WAAW,EAAEC,cAAa,QAAS,kBAAkB;AAC7F,SAASC,UAAU,EAAEC,MAAM,EAAEC,eAAc,QAAS,oBAAoB;AACxE,SAASC,EAAC,QAAS,wBAAwB;AAG3C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAMC,IAAG,GAAIC,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACC,WAAW;QACxC,IAAI,CAACH,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;QAEpD,IAAIC,QAAO,GAAI,IAAI;QACnB,IAAI,IAAI,CAACR,UAAU,EAAE;UACnB,MAAMS,OAAM,GAAIpB,UAAU,CAAC,CAAC;UAC5B,MAAMqB,QAAO,GAAInB,UAAU,CAACkB,OAAO,EAAE,SAAQ,GAAI,IAAI,CAACT,UAAU,CAACW,IAAI,CAAC;UACtE,MAAMnB,WAAW,CAACkB,QAAQ,EAAE,IAAI,CAACV,UAAU,CAAC;UAC5CQ,QAAO,GAAI,MAAMf,cAAc,CAACiB,QAAQ,CAAC;QAC3C;QAEA,MAAM,IAAI,CAACE,WAAW,CAAC,IAAI,CAACb,YAAY,EAAEI,IAAI,EAAEK,QAAQ,CAAC;QACzD,IAAI,CAACT,YAAW,GAAI,EAAE,EAAE;QACxB,IAAI,CAACC,UAAS,GAAI,IAAI;QACtB,IAAI,CAACa,KAAK,CAAC,aAAa,CAAC;QACzB,IAAI,CAACC,WAAW,CAAC,CAAC;MACpB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDE,YAAYA,CAACC,CAAC,EAAE;MACd,MAAMC,IAAG,GAAID,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAIF,IAAI,EAAE;QACR,IAAI,CAACnB,UAAS,GAAImB,IAAI;MACxB;IACF,CAAC;IACD,MAAMP,WAAWA,CAACU,OAAO,EAAEnB,IAAI,EAAEK,QAAO,GAAI,IAAI,EAAE;MAChD,MAAMe,KAAI,GAAI;QACZD,OAAO,EAAEA,OAAO;QAChBE,SAAS,EAAE5B,eAAe,CAAC,CAAC;QAC5B6B,MAAM,EAAEtB,IAAI,CAACuB,GAAG;QAChBC,QAAQ,EAAExB,IAAI,CAACyB,WAAU,IAAKzB,IAAI,CAAC0B,KAAK;QAAE;QAC1CC,YAAY,EAAE3B,IAAI,CAAC2B,YAAY;QAC/BtB,QAAQ,EAAEA,QAAQ,CAAE;MACtB,CAAC;;MAED,MAAMuB,gBAAe,GAAIrC,UAAU,CAACG,EAAE,EAAE,QAAQ,CAAC;MACjD,MAAMF,MAAM,CAACoC,gBAAgB,EAAER,KAAK,CAAC;IACvC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}