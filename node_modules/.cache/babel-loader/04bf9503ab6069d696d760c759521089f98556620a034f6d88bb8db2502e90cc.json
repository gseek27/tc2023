{"ast":null,"code":"import { getFirestore, doc, getDoc, deleteDoc } from 'firebase/firestore';\nimport { getStorage, ref as storageRef, getDownloadURL } from 'firebase/storage';\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      localTweetData: {\n        ...this.tweetData\n      },\n      // Create a local copy\n      videoURL: '',\n      actualUsername: '',\n      actualProfileImage: ''\n    };\n  },\n  mounted() {\n    // Fetch video URL\n    const storagePath = this.tweetData.imageUrl;\n    if (storagePath) {\n      const storage = getStorage();\n      const videoRef = storageRef(storage, storagePath);\n      getDownloadURL(videoRef).then(url => {\n        this.videoURL = url;\n      }).catch(error => {\n        console.error(\"Error fetching video URL:\", error);\n      });\n    }\n\n    // Fetch user data\n    this.fetchUserData();\n  },\n  methods: {\n    isImage(url) {\n      return /.*\\.(jpeg|jpg|png)/i.test(url);\n    },\n    isGif(url) {\n      return /.*\\.gif/i.test(url);\n    },\n    isVideo(url) {\n      return /.*\\.(mp4|webm|ogg|mov)/i.test(url);\n    },\n    async fetchUserData() {\n      try {\n        const db = getFirestore();\n        const userDocRef = doc(db, 'users', this.localTweetData.userId);\n        const userDocSnapshot = await getDoc(userDocRef);\n        if (userDocSnapshot.exists()) {\n          const userData = userDocSnapshot.data();\n          this.actualUsername = userData.username;\n          this.actualProfileImage = userData.profileImage;\n        } else {\n          console.error('User document does not exist');\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id));\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["getFirestore","doc","getDoc","deleteDoc","getStorage","ref","storageRef","getDownloadURL","props","tweetData","type","Object","required","default","data","localTweetData","videoURL","actualUsername","actualProfileImage","mounted","storagePath","imageUrl","storage","videoRef","then","url","catch","error","console","fetchUserData","methods","isImage","test","isGif","isVideo","db","userDocRef","userId","userDocSnapshot","exists","userData","username","profileImage","deleteTweet","id","$emit"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetPost.vue"],"sourcesContent":["<template>\n  <div v-if=\"tweetData.content\" class=\"tweet-post\">\n <router-link :to=\"{ name: 'profile', params: { username: actualUsername } }\">\n      <v-avatar v-if=\"actualProfileImage\">\n        <img :src=\"actualProfileImage\">\n      </v-avatar>  \n      <strong v-if=\"actualUsername\">@{{ actualUsername }}</strong>\n    </router-link>\n    <p v-if=\"tweetData.content\">{{ tweetData.content }}</p>\n\n    <!-- Display media based on its type -->\n    <v-img v-if=\"isImage(tweetData.imageUrl) || isGif(tweetData.imageUrl)\" :src=\"tweetData.imageUrl\" aspect-ratio=\"2\"></v-img>\n\n    <!-- Display Video -->\n    <video v-if=\"isVideo(tweetData.imageUrl)\" controls preload=\"auto\" playsinline>\n      <source :src=\"tweetData.imageUrl\" type=\"video/mp4\">\n      Your browser does not support the video tag.\n    </video>\n\n    <button v-if=\"tweetData.content\" @click=\"deleteTweet\">Delete</button>\n  </div>\n</template>\n\n<script>\nimport { getFirestore, doc, getDoc, deleteDoc } from 'firebase/firestore';\nimport { getStorage, ref as storageRef, getDownloadURL } from 'firebase/storage';\n\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      localTweetData: { ...this.tweetData }, // Create a local copy\n      videoURL: '',\n      actualUsername: '',\n      actualProfileImage: ''\n    };\n  },\n  mounted() {\n    // Fetch video URL\n    const storagePath = this.tweetData.imageUrl;\n\n    if (storagePath) {\n      const storage = getStorage();\n      const videoRef = storageRef(storage, storagePath);\n\n      getDownloadURL(videoRef)\n        .then((url) => {\n          this.videoURL = url;\n        })\n        .catch((error) => {\n          console.error(\"Error fetching video URL:\", error);\n        });\n    }\n\n    // Fetch user data\n    this.fetchUserData();\n  },\n  methods: {\n    isImage(url) {\n      return /.*\\.(jpeg|jpg|png)/i.test(url);\n    },\n    isGif(url) {\n      return /.*\\.gif/i.test(url);\n    },\n    isVideo(url) {\n      return /.*\\.(mp4|webm|ogg|mov)/i.test(url);\n    },\nasync fetchUserData() {\n  try {\n    const db = getFirestore();\n    const userDocRef = doc(db, 'users', this.localTweetData.userId);\n    const userDocSnapshot = await getDoc(userDocRef);\n\n    if (userDocSnapshot.exists()) {\n      const userData = userDocSnapshot.data();\n      this.actualUsername = userData.username;\n      this.actualProfileImage = userData.profileImage;\n    } else {\n      console.error('User document does not exist');\n    }\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n  }\n},\n\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id));\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.tweet-post {\n  margin-bottom: 90px;\n  border: 1px solid #e0e0e0;\n  padding: 10px;\n  margin-top: 30px;\n  border-radius: 5px;\n}\n.tweet-post button {\n  display: block;\n  background-color: red;\n  color: white;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}