{"ast":null,"code":"import { getFirestore, doc, deleteDoc, getStorage, ref as storageRef, getDownloadURL } from 'firebase/firestore';\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({}) // Default is now an empty object\n    }\n  },\n\n  data() {\n    return {\n      videoURL: '' // This will be set after fetching from Firebase\n    };\n  },\n\n  mounted() {\n    // Assuming `tweetData.imageUrl` contains the path to the video in Firebase Storage\n    const storagePath = this.tweetData.imageUrl;\n    if (storagePath) {\n      const storage = getStorage();\n      const videoRef = storageRef(storage, storagePath);\n      getDownloadURL(videoRef).then(url => {\n        this.videoURL = url;\n      }).catch(error => {\n        console.error(\"Error fetching video URL:\", error);\n      });\n    }\n  },\n  methods: {\n    isImage(url) {\n      // Updated to detect .jpeg, .jpg, .png, and .gif anywhere in the URL string\n      return /.*\\.(jpeg|jpg|png|gif)/i.test(url);\n    },\n    isVideo(url) {\n      // Updated to detect .mp4, .webm, and .ogg anywhere in the URL string\n      return /.*\\.(mp4|webm|ogg)/i.test(url);\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id)); // \"tweets\" should match your collection name\n        // Optionally emit an event to parent component or show a notification\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["getFirestore","doc","deleteDoc","getStorage","ref","storageRef","getDownloadURL","props","tweetData","type","Object","required","default","data","videoURL","mounted","storagePath","imageUrl","storage","videoRef","then","url","catch","error","console","methods","isImage","test","isVideo","deleteTweet","db","id","$emit"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetPost.vue"],"sourcesContent":["<template>\n  <div v-if=\"tweetData.content\" class=\"tweet-post\">\n    <v-avatar v-if=\"tweetData.profileImage\">\n      <img :src=\"tweetData.profileImage\">\n    </v-avatar>\n    <strong v-if=\"tweetData.username\">@{{ tweetData.username }}</strong>\n    <p v-if=\"tweetData.content\">{{ tweetData.content }}</p>\n\n    <!-- Display media based on its type -->\n    <v-img v-if=\"isImage(tweetData.imageUrl)\" :src=\"tweetData.imageUrl\" aspect-ratio=\"2\"></v-img>\n  \n   <video v-if=\"videoURL\" controls preload=\"auto\" playsinline>\n      <source :src=\"videoURL\" type=\"video/mp4\">\n      Your browser does not support the video tag.\n    </video>\n\n    <button v-if=\"tweetData.content\" @click=\"deleteTweet\">Delete</button>\n  </div>\n</template>\n\n<script>\nimport { getFirestore, doc, deleteDoc, getStorage, ref as storageRef, getDownloadURL } from 'firebase/firestore';\n\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({})  // Default is now an empty object\n    }\n  },\n  data() {\n    return {\n      videoURL: '' // This will be set after fetching from Firebase\n    };\n  },\n  mounted() {\n    // Assuming `tweetData.imageUrl` contains the path to the video in Firebase Storage\n    const storagePath = this.tweetData.imageUrl;\n    \n    if (storagePath) {\n      const storage = getStorage();\n      const videoRef = storageRef(storage, storagePath);\n\n      getDownloadURL(videoRef)\n        .then((url) => {\n          this.videoURL = url;\n        })\n        .catch((error) => {\n          console.error(\"Error fetching video URL:\", error);\n        });\n    }\n  },\n  methods: {\n    isImage(url) {\n      // Updated to detect .jpeg, .jpg, .png, and .gif anywhere in the URL string\n      return /.*\\.(jpeg|jpg|png|gif)/i.test(url);\n    },\n    isVideo(url) {\n      // Updated to detect .mp4, .webm, and .ogg anywhere in the URL string\n      return /.*\\.(mp4|webm|ogg)/i.test(url);\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id)); // \"tweets\" should match your collection name\n        // Optionally emit an event to parent component or show a notification\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.tweet-post {\n  margin-bottom: 90px;\n  border: 1px solid #e0e0e0;\n  padding: 10px;\n  margin-top: 30px;\n  border-radius: 5px;\n}\n.tweet-post button {\n  display: block;\n  background-color: red;\n  color: white;\n}\n</style>\n"],"mappings":"AAqBA,SAASA,YAAY,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,EAAEC,GAAE,IAAKC,UAAU,EAAEC,cAAa,QAAS,oBAAoB;AAEhH,eAAe;EACbC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAEA,CAAA,MAAO,CAAC,CAAC,EAAG;IACvB;EACF,CAAC;;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAC,CAAE;IACf,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,MAAMC,WAAU,GAAI,IAAI,CAACR,SAAS,CAACS,QAAQ;IAE3C,IAAID,WAAW,EAAE;MACf,MAAME,OAAM,GAAIf,UAAU,CAAC,CAAC;MAC5B,MAAMgB,QAAO,GAAId,UAAU,CAACa,OAAO,EAAEF,WAAW,CAAC;MAEjDV,cAAc,CAACa,QAAQ,EACpBC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACP,QAAO,GAAIO,GAAG;MACrB,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACN;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,OAAOA,CAACL,GAAG,EAAE;MACX;MACA,OAAO,yBAAyB,CAACM,IAAI,CAACN,GAAG,CAAC;IAC5C,CAAC;IACDO,OAAOA,CAACP,GAAG,EAAE;MACX;MACA,OAAO,qBAAqB,CAACM,IAAI,CAACN,GAAG,CAAC;IACxC,CAAC;IACD,MAAMQ,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,EAAC,GAAI9B,YAAY,CAAC,CAAC;QACzB,MAAME,SAAS,CAACD,GAAG,CAAC6B,EAAE,EAAE,QAAQ,EAAE,IAAI,CAACtB,SAAS,CAACuB,EAAE,CAAC,CAAC,EAAE;QACvD;QACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE,IAAI,CAACxB,SAAS,CAACuB,EAAE,CAAC;MAC/C,EAAE,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}