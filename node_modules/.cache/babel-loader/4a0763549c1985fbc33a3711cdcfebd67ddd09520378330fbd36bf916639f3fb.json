{"ast":null,"code":"import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp, doc, getDoc } from 'firebase/firestore';\nimport { db } from '/src/firebase/index.js';\nimport { auth } from '/src/firebase/index.js';\nexport default {\n  data() {\n    return {\n      tweetContent: '',\n      tweetImage: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = auth.currentUser;\n        if (!user) throw new Error('User not authenticated');\n\n        // Fetch the user's profile data, including the username\n        const profileDoc = await this.fetchUserProfile(user.uid);\n\n        // Ensure that the username is available in the profile\n        if (!profileDoc.exists() || !profileDoc.data().username) {\n          throw new Error('Username is missing');\n        }\n        let imageUrl = null;\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          imageUrl = await getDownloadURL(imageRef);\n        }\n        const username = profileDoc.data().username; // Get the username from the profile\n\n        await this.createTweet(this.tweetContent, user, imageUrl, username);\n        this.tweetContent = ''; // Clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n      } catch (error) {\n        console.error('Error posting tweet:', error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n    async fetchUserProfile(userId) {\n      const profileDocRef = doc(collection(db, 'users'), userId);\n      return await getDoc(profileDocRef);\n    },\n    async createTweet(content, user, imageUrl, username) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: username // Set the username from the profile\n      };\n\n      // Only add profileImage to tweet if it's defined\n      if (user.profileImage) {\n        tweet.profileImage = user.profileImage;\n      }\n      const tweetsCollection = collection(db, 'tweets');\n      await addDoc(tweetsCollection, tweet);\n    }\n  }\n};","map":{"version":3,"names":["getStorage","ref","storageRef","uploadBytes","getDownloadURL","collection","addDoc","serverTimestamp","doc","getDoc","db","auth","data","tweetContent","tweetImage","methods","postTweet","user","currentUser","Error","profileDoc","fetchUserProfile","uid","exists","username","imageUrl","storage","imageRef","name","createTweet","$emit","error","console","onFileChange","e","file","target","files","userId","profileDocRef","content","tweet","timestamp","profileImage","tweetsCollection"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <v-row>\n    <!-- This column will take the majority of the space -->\n    <v-col cols=\"12\">\n      <v-textarea\n        v-model=\"tweetContent\"\n        placeholder=\"What is happening?!\"\n      ></v-textarea>\n    </v-col>\n  </v-row>\n\n  <v-row>\n    <v-col cols=\"10\">\n      <!-- Upload icon triggering the file input -->\n      <label>\n        <v-icon>mdi-image</v-icon>\n        <input type=\"file\" @change=\"onFileChange\" style=\"display: none\" />\n      </label>\n    </v-col>\n\n    <!-- This column will be for the Post button -->\n    <v-col cols=\"1\" class=\"text-end\">\n      <v-btn @click=\"postTweet\">Post</v-btn>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport {\n  getStorage,\n  ref as storageRef,\n  uploadBytes,\n  getDownloadURL,\n} from 'firebase/storage'\nimport {\n  collection,\n  addDoc,\n  serverTimestamp,\n  doc,\n  getDoc,\n} from 'firebase/firestore'\nimport { db } from '/src/firebase/index.js'\nimport { auth } from '/src/firebase/index.js'\n\nexport default {\n  data() {\n    return {\n      tweetContent: '',\n      tweetImage: null,\n    }\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = auth.currentUser\n        if (!user) throw new Error('User not authenticated')\n\n        // Fetch the user's profile data, including the username\n        const profileDoc = await this.fetchUserProfile(user.uid)\n\n        // Ensure that the username is available in the profile\n        if (!profileDoc.exists() || !profileDoc.data().username) {\n          throw new Error('Username is missing')\n        }\n\n        let imageUrl = null\n        if (this.tweetImage) {\n          const storage = getStorage()\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name)\n          await uploadBytes(imageRef, this.tweetImage)\n          imageUrl = await getDownloadURL(imageRef)\n        }\n\n        const username = profileDoc.data().username // Get the username from the profile\n\n        await this.createTweet(this.tweetContent, user, imageUrl, username)\n        this.tweetContent = '' // Clear the textarea after posting\n        this.tweetImage = null\n        this.$emit('tweetPosted')\n      } catch (error) {\n        console.error('Error posting tweet:', error)\n      }\n    },\n\n    onFileChange(e) {\n      const file = e.target.files[0]\n      if (file) {\n        this.tweetImage = file\n      }\n    },\n\n    async fetchUserProfile(userId) {\n      const profileDocRef = doc(collection(db, 'users'), userId)\n      return await getDoc(profileDocRef)\n    },\n\n    async createTweet(content, user, imageUrl, username) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: username, // Set the username from the profile\n      }\n\n      // Only add profileImage to tweet if it's defined\n      if (user.profileImage) {\n        tweet.profileImage = user.profileImage\n      }\n\n      const tweetsCollection = collection(db, 'tweets')\n      await addDoc(tweetsCollection, tweet)\n    },\n  },\n}\n</script>\n"],"mappings":"AA4BA,SACEA,UAAU,EACVC,GAAE,IAAKC,UAAU,EACjBC,WAAW,EACXC,cAAc,QACT,kBAAiB;AACxB,SACEC,UAAU,EACVC,MAAM,EACNC,eAAe,EACfC,GAAG,EACHC,MAAM,QACD,oBAAmB;AAC1B,SAASC,EAAC,QAAS,wBAAuB;AAC1C,SAASC,IAAG,QAAS,wBAAuB;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAMC,IAAG,GAAIN,IAAI,CAACO,WAAU;QAC5B,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIE,KAAK,CAAC,wBAAwB;;QAEnD;QACA,MAAMC,UAAS,GAAI,MAAM,IAAI,CAACC,gBAAgB,CAACJ,IAAI,CAACK,GAAG;;QAEvD;QACA,IAAI,CAACF,UAAU,CAACG,MAAM,CAAC,KAAK,CAACH,UAAU,CAACR,IAAI,CAAC,CAAC,CAACY,QAAQ,EAAE;UACvD,MAAM,IAAIL,KAAK,CAAC,qBAAqB;QACvC;QAEA,IAAIM,QAAO,GAAI,IAAG;QAClB,IAAI,IAAI,CAACX,UAAU,EAAE;UACnB,MAAMY,OAAM,GAAI1B,UAAU,CAAC;UAC3B,MAAM2B,QAAO,GAAIzB,UAAU,CAACwB,OAAO,EAAE,SAAQ,GAAI,IAAI,CAACZ,UAAU,CAACc,IAAI;UACrE,MAAMzB,WAAW,CAACwB,QAAQ,EAAE,IAAI,CAACb,UAAU;UAC3CW,QAAO,GAAI,MAAMrB,cAAc,CAACuB,QAAQ;QAC1C;QAEA,MAAMH,QAAO,GAAIJ,UAAU,CAACR,IAAI,CAAC,CAAC,CAACY,QAAO,EAAE;;QAE5C,MAAM,IAAI,CAACK,WAAW,CAAC,IAAI,CAAChB,YAAY,EAAEI,IAAI,EAAEQ,QAAQ,EAAED,QAAQ;QAClE,IAAI,CAACX,YAAW,GAAI,EAAC,EAAE;QACvB,IAAI,CAACC,UAAS,GAAI,IAAG;QACrB,IAAI,CAACgB,KAAK,CAAC,aAAa;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK;MAC7C;IACF,CAAC;IAEDE,YAAYA,CAACC,CAAC,EAAE;MACd,MAAMC,IAAG,GAAID,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;MAC7B,IAAIF,IAAI,EAAE;QACR,IAAI,CAACrB,UAAS,GAAIqB,IAAG;MACvB;IACF,CAAC;IAED,MAAMd,gBAAgBA,CAACiB,MAAM,EAAE;MAC7B,MAAMC,aAAY,GAAI/B,GAAG,CAACH,UAAU,CAACK,EAAE,EAAE,OAAO,CAAC,EAAE4B,MAAM;MACzD,OAAO,MAAM7B,MAAM,CAAC8B,aAAa;IACnC,CAAC;IAED,MAAMV,WAAWA,CAACW,OAAO,EAAEvB,IAAI,EAAEQ,QAAQ,EAAED,QAAQ,EAAE;MACnD,MAAMiB,KAAI,GAAI;QACZD,OAAO,EAAEA,OAAO;QAChBE,SAAS,EAAEnC,eAAe,CAAC,CAAC;QAC5B+B,MAAM,EAAErB,IAAI,CAACK,GAAG;QAChBE,QAAQ,EAAEA,QAAQ,CAAE;MACtB;;MAEA;MACA,IAAIP,IAAI,CAAC0B,YAAY,EAAE;QACrBF,KAAK,CAACE,YAAW,GAAI1B,IAAI,CAAC0B,YAAW;MACvC;MAEA,MAAMC,gBAAe,GAAIvC,UAAU,CAACK,EAAE,EAAE,QAAQ;MAChD,MAAMJ,MAAM,CAACsC,gBAAgB,EAAEH,KAAK;IACtC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}