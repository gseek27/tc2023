{"ast":null,"code":"import { getFirestore, doc, getDoc, deleteDoc, updateDoc } from 'firebase/firestore';\nimport { getStorage, ref as storageRef, getDownloadURL } from 'firebase/storage';\nimport { auth } from '/src/firebase/index.js';\nexport default {\n  computed: {\n    currentUserId() {\n      return auth.currentUser?.uid;\n    }\n  },\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    },\n    userId: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      videoURL: '',\n      actualUsername: '',\n      actualProfileImage: ''\n    };\n  },\n  mounted() {\n    // Fetch video URL\n    const storagePath = this.tweetData.imageUrl;\n    if (storagePath) {\n      const storage = getStorage();\n      const videoRef = storageRef(storage, storagePath);\n      getDownloadURL(videoRef).then(url => {\n        this.videoURL = url;\n      }).catch(error => {\n        console.error('Error fetching video URL:', error);\n      });\n    }\n\n    // Fetch user data\n    this.fetchUserData();\n  },\n  methods: {\n    isImage(url) {\n      return /.*\\.(jpeg|jpg|png)/i.test(url);\n    },\n    isGif(url) {\n      return /.*\\.gif/i.test(url);\n    },\n    isVideo(url) {\n      return /.*\\.(mp4|webm|ogg|mov)/i.test(url);\n    },\n    async fetchUserData() {\n      try {\n        const db = getFirestore();\n        const userDocRef = doc(db, 'users', this.tweetData.userId);\n        const userDocSnapshot = await getDoc(userDocRef);\n        if (userDocSnapshot.exists()) {\n          const userData = userDocSnapshot.data();\n          this.actualUsername = userData.username;\n          this.actualProfileImage = userData.profileImage;\n        } else {\n          console.error('User document does not exist');\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    },\n    async toggleLike() {\n      const db = getFirestore();\n      const tweetRef = doc(db, 'tweets', this.tweetData.id);\n      const newStatus = !this.tweetData.liked;\n      await updateDoc(tweetRef, {\n        liked: newStatus\n      });\n      this.$emit('tweetLikedStatusUpdated', {\n        tweetId: this.tweetData.id,\n        status: newStatus\n      });\n    },\n    async toggleRepeat() {\n      const db = getFirestore();\n      const tweetRef = doc(db, 'tweets', this.tweetData.id);\n      const newStatus = !this.tweetData.repeated;\n      await updateDoc(tweetRef, {\n        repeated: newStatus\n      });\n      this.$emit('tweetRepeatStatusUpdated', {\n        tweetId: this.tweetData.id,\n        status: newStatus\n      });\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, 'tweets', this.tweetData.id));\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error('Error deleting tweet:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["getFirestore","doc","getDoc","deleteDoc","updateDoc","getStorage","ref","storageRef","getDownloadURL","auth","computed","currentUserId","currentUser","uid","props","tweetData","type","Object","required","default","userId","String","data","videoURL","actualUsername","actualProfileImage","mounted","storagePath","imageUrl","storage","videoRef","then","url","catch","error","console","fetchUserData","methods","isImage","test","isGif","isVideo","db","userDocRef","userDocSnapshot","exists","userData","username","profileImage","toggleLike","tweetRef","id","newStatus","liked","$emit","tweetId","status","toggleRepeat","repeated","deleteTweet"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetPost.vue"],"sourcesContent":["<template>\n  <div class=\"tweet-post\">\n    <router-link\n      :to=\"{ name: 'profile', params: { username: actualUsername } }\"\n    >\n      <v-avatar v-if=\"actualProfileImage\">\n        <img :src=\"actualProfileImage\" />\n      </v-avatar>\n    </router-link>\n    &nbsp;\n    <strong v-if=\"actualUsername\">\n      <router-link\n        :to=\"{ name: 'profile', params: { username: actualUsername } }\"\n        >@{{ actualUsername }}</router-link\n      >\n    </strong>\n\n    <p v-if=\"tweetData.content\">{{ tweetData.content }}</p>\n\n    <!-- Display media based on its type -->\n    <v-img\n      v-if=\"isImage(tweetData.imageUrl) || isGif(tweetData.imageUrl)\"\n      :src=\"tweetData.imageUrl\"\n      aspect-ratio=\"2\"\n    ></v-img>\n\n    <!-- Display Video -->\n    <video\n      v-if=\"isVideo(tweetData.imageUrl)\"\n      controls\n      preload=\"auto\"\n      playsinline\n    >\n      <source :src=\"tweetData.imageUrl\" type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n\n    <div class=\"actions-row\">\n\n     <!--  Comment Icon -->\n      <v-icon\n        @click=\"toggleComment\"\n        :color=\"tweetData.commented ? 'blue' : 'gray'\"\n        class=\"comment-icon\"\n      >\n        mdi-comment\n      </v-icon>\n\n\n      <!-- Heart (Like) Icon -->\n      <v-icon\n        @click=\"toggleLike\"\n        :color=\"tweetData.liked ? 'red' : 'gray'\"\n        class=\"heart-icon\"\n      >\n        mdi-heart\n      </v-icon>\n\n      <!-- Repeat (Retweet) Icon -->\n      <v-icon\n        @click=\"toggleRepeat\"\n        :color=\"tweetData.repeated ? 'green' : 'gray'\"\n        class=\"repeat-icon\"\n      >\n        mdi-repeat\n      </v-icon>\n\n      <!-- Delete Button (Show if the current user has the same userId) -->\n      <button v-if=\"userId === currentUserId\" @click=\"deleteTweet\">\n        Delete\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  deleteDoc,\n  updateDoc,\n} from 'firebase/firestore'\nimport { getStorage, ref as storageRef, getDownloadURL } from 'firebase/storage'\nimport { auth } from '/src/firebase/index.js'\n\nexport default {\n  computed: {\n    currentUserId() {\n      return auth.currentUser?.uid\n    },\n  },\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({}),\n    },\n    userId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      videoURL: '',\n      actualUsername: '',\n      actualProfileImage: '',\n    }\n  },\n  mounted() {\n    // Fetch video URL\n    const storagePath = this.tweetData.imageUrl\n    if (storagePath) {\n      const storage = getStorage()\n      const videoRef = storageRef(storage, storagePath)\n      getDownloadURL(videoRef)\n        .then((url) => {\n          this.videoURL = url\n        })\n        .catch((error) => {\n          console.error('Error fetching video URL:', error)\n        })\n    }\n\n    // Fetch user data\n    this.fetchUserData()\n  },\n  methods: {\n    isImage(url) {\n      return /.*\\.(jpeg|jpg|png)/i.test(url)\n    },\n    isGif(url) {\n      return /.*\\.gif/i.test(url)\n    },\n    isVideo(url) {\n      return /.*\\.(mp4|webm|ogg|mov)/i.test(url)\n    },\n    async fetchUserData() {\n      try {\n        const db = getFirestore()\n        const userDocRef = doc(db, 'users', this.tweetData.userId)\n        const userDocSnapshot = await getDoc(userDocRef)\n        if (userDocSnapshot.exists()) {\n          const userData = userDocSnapshot.data()\n          this.actualUsername = userData.username\n          this.actualProfileImage = userData.profileImage\n        } else {\n          console.error('User document does not exist')\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error)\n      }\n    },\n\n    async toggleLike() {\n      const db = getFirestore()\n      const tweetRef = doc(db, 'tweets', this.tweetData.id)\n      const newStatus = !this.tweetData.liked\n      await updateDoc(tweetRef, { liked: newStatus })\n      this.$emit('tweetLikedStatusUpdated', {\n        tweetId: this.tweetData.id,\n        status: newStatus,\n      })\n    },\n    async toggleRepeat() {\n      const db = getFirestore()\n      const tweetRef = doc(db, 'tweets', this.tweetData.id)\n      const newStatus = !this.tweetData.repeated\n      await updateDoc(tweetRef, { repeated: newStatus })\n      this.$emit('tweetRepeatStatusUpdated', {\n        tweetId: this.tweetData.id,\n        status: newStatus,\n      })\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore()\n        await deleteDoc(doc(db, 'tweets', this.tweetData.id))\n        this.$emit('tweetDeleted', this.tweetData.id)\n      } catch (error) {\n        console.error('Error deleting tweet:', error)\n      }\n    },\n  },\n}\n</script>\n\n<style scoped>\n.tweet-post {\n  margin-bottom: 30px;\n  border: 1px solid #e0e0e0;\n  padding: 10px;\n  margin-top: 30px;\n  border-radius: 5px;\n}\n.tweet-post button {\n  display: block;\n  background-color: red;\n  color: white;\n}\n.actions-row {\n  display: flex;\n  align-items: center;\n  margin-top: 20px;\n}\n.heart-icon,\n.repeat-icon {\n  margin-right: 20px;\n}\n.actions-row > *:last-child {\n  margin-right: 0;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}