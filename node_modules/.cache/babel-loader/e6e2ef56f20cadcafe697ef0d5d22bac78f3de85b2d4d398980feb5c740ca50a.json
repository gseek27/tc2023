{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_textarea = _resolveComponent(\"v-textarea\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_row, null, {\n    default: _withCtx(() => [_createCommentVNode(\" This column will take the majority of the space \"), _createVNode(_component_v_col, {\n      cols: \"12\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_textarea, {\n        modelValue: $data.tweetContent,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.tweetContent = $event),\n        placeholder: \"What is happening?!\"\n      }, null, 8 /* PROPS */, [\"modelValue\"])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_row, null, {\n    default: _withCtx(() => [_createVNode(_component_v_col, {\n      cols: \"10\"\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" Upload icon triggering the file input \"), _createElementVNode(\"label\", null, [_createVNode(_component_v_icon, null, {\n        default: _withCtx(() => [_createTextVNode(\"mdi-image\")]),\n        _: 1 /* STABLE */\n      }), _createElementVNode(\"input\", {\n        type: \"file\",\n        onChange: _cache[1] || (_cache[1] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n        style: {\n          \"display\": \"none\"\n        }\n      }, null, 32 /* HYDRATE_EVENTS */)])]),\n\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" This column will be for the Post button \"), _createVNode(_component_v_col, {\n      cols: \"1\",\n      class: \"text-end\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_btn, {\n        onClick: $options.postTweet\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"Post\")]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createVNode","_component_v_row","_createCommentVNode","_component_v_col","cols","_component_v_textarea","$data","tweetContent","$event","placeholder","_createElementVNode","_component_v_icon","type","onChange","_cache","args","$options","onFileChange","style","class","_component_v_btn","onClick","postTweet"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <v-row>\n    <!-- This column will take the majority of the space -->\n    <v-col cols=\"12\">\n      <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n    </v-col>\n  </v-row>\n\n  <v-row>\n    <v-col cols=\"10\">\n      <!-- Upload icon triggering the file input -->\n      <label>\n        <v-icon>mdi-image</v-icon>\n        <input type=\"file\" @change=\"onFileChange\" style=\"display: none;\">\n      </label>\n    </v-col>\n\n    <!-- This column will be for the Post button -->\n    <v-col cols=\"1\" class=\"text-end\">\n      <v-btn @click=\"postTweet\">Post</v-btn>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc, serverTimestamp, doc, getDoc } from 'firebase/firestore';\nimport { db } from '/src/firebase/index.js';\nimport { auth } from '/src/firebase/index.js';\n\nexport default {\n  data() {\n    return {\n      tweetContent: '',\n      tweetImage: null,\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        const user = auth.currentUser;\n        if (!user) throw new Error('User not authenticated');\n\n        // Fetch the user's profile data, including the username\n        const profileDoc = await this.fetchUserProfile(user.uid);\n\n        // Ensure that the username is available in the profile\n        if (!profileDoc.exists() || !profileDoc.data().username) {\n          throw new Error('Username is missing');\n        }\n\n        let imageUrl = null;\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          imageUrl = await getDownloadURL(imageRef);\n        }\n\n        const username = profileDoc.data().username; // Get the username from the profile\n\n        await this.createTweet(this.tweetContent, user, imageUrl, username);\n        this.tweetContent = ''; // Clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n      } catch (error) {\n        console.error('Error posting tweet:', error);\n      }\n    },\n\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    },\n\n    async fetchUserProfile(userId) {\n      const profileDocRef = doc(collection(db, 'users'), userId);\n      return await getDoc(profileDocRef);\n    },\n\n    async createTweet(content, user, imageUrl, username) {\n      const tweet = {\n        content: content,\n        timestamp: serverTimestamp(),\n        userId: user.uid,\n        username: username, // Set the username from the profile\n      };\n\n      // Only add profileImage to tweet if it's defined\n      if (user.profileImage) {\n        tweet.profileImage = user.profileImage;\n      }\n\n      const tweetsCollection = collection(db, 'tweets');\n      await addDoc(tweetsCollection, tweet);\n    },\n  },\n};\n</script>\n"],"mappings":";;;;;;;6DACEA,YAAA,CAKQC,gBAAA;sBAJN,MAAwD,CAAxDC,mBAAA,qDAAwD,EACxDF,YAAA,CAEQG,gBAAA;MAFDC,IAAI,EAAC;IAAI;wBACd,MAAkF,CAAlFJ,YAAA,CAAkFK,qBAAA;oBAA7DC,KAAA,CAAAC,YAAY;mEAAZD,KAAA,CAAAC,YAAY,GAAAC,MAAA;QAAEC,WAAW,EAAC;;;;;;MAInDT,YAAA,CAaQC,gBAAA;sBAZN,MAMQ,CANRD,YAAA,CAMQG,gBAAA;MANDC,IAAI,EAAC;IAAI;wBACd,MAA8C,CAA9CF,mBAAA,2CAA8C,EAC9CQ,mBAAA,CAGQ,gBAFNV,YAAA,CAA0BW,iBAAA;0BAAlB,MAAS,C,iBAAT,WAAS,E;;UACjBD,mBAAA,CAAiE;QAA1DE,IAAI,EAAC,MAAM;QAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;QAAEG,KAAsB,EAAtB;UAAA;QAAA;;;;QAI9ChB,mBAAA,6CAAgD,EAChDF,YAAA,CAEQG,gBAAA;MAFDC,IAAI,EAAC,GAAG;MAACe,KAAK,EAAC;;wBACpB,MAAsC,CAAtCnB,YAAA,CAAsCoB,gBAAA;QAA9BC,OAAK,EAAEL,QAAA,CAAAM;MAAS;0BAAE,MAAI,C,iBAAJ,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}