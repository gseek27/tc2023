{"ast":null,"code":"import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection } from 'firebase/firestore'; // <-- Import FieldValue\nimport { serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\"; // adjust the path according to your project structure\n\n/*\nconst firebaseConfig = {\n\n    apiKey: \"AIzaSyAxG3LGCtQHwZLxIxvFoaplouY5HlNU6JM\",\n  \n    authDomain: \"tc2023-21859.firebaseapp.com\",\n  \n    projectId: \"tc2023-21859\",\n  \n    storageBucket: \"tc2023-21859.appspot.com\",\n  \n    messagingSenderId: \"960022654133\",\n  \n    appId: \"1:960022654133:web:79b8495bce163d7f3322fc\",\n  \n    measurementId: \"G-589259DH29\"\n  \n  };\n  */\n\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetImage: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          const imageUrl = await getDownloadURL(imageRef);\n          await addDoc(collection(db, \"tweets\"), {\n            content: this.tweetContent,\n            timestamp: serverTimestamp(),\n            // to add a server-generated timestamp\n            imageUrl\n          });\n        } else {\n          await addDoc(collection(db, \"tweets\"), {\n            content: this.tweetContent,\n            timestamp: serverTimestamp()\n          });\n        }\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        this.fetchTweets();\n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    }\n  }\n};","map":{"version":3,"names":["getStorage","ref","storageRef","uploadBytes","getDownloadURL","addDoc","collection","serverTimestamp","db","data","tweetContent","tweetImage","methods","postTweet","storage","imageRef","name","imageUrl","content","timestamp","$emit","fetchTweets","error","console","onFileChange","e","file","target","files"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <div>\n    <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n    \n    <!-- Upload icon triggering the file input -->\n    <label>\n      <v-icon>mdi-image</v-icon>\n      <input type=\"file\" @change=\"onFileChange\" style=\"display: none;\">\n    </label>\n\n    <v-btn reight @click=\"postTweet\">Post</v-btn>\n  </div>\n</template>\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection } from 'firebase/firestore';  // <-- Import FieldValue\nimport { serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\"; // adjust the path according to your project structure\n\n/*\nconst firebaseConfig = {\n\n    apiKey: \"AIzaSyAxG3LGCtQHwZLxIxvFoaplouY5HlNU6JM\",\n  \n    authDomain: \"tc2023-21859.firebaseapp.com\",\n  \n    projectId: \"tc2023-21859\",\n  \n    storageBucket: \"tc2023-21859.appspot.com\",\n  \n    messagingSenderId: \"960022654133\",\n  \n    appId: \"1:960022654133:web:79b8495bce163d7f3322fc\",\n  \n    measurementId: \"G-589259DH29\"\n  \n  };\n  */\n\n\n\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetImage: null\n    };\n  },\n  methods: { \n    async postTweet() {\n      try {\n          if (this.tweetImage) {\n          const storage = getStorage();\n          const imageRef = storageRef(storage, 'tweets/' + this.tweetImage.name);\n          await uploadBytes(imageRef, this.tweetImage);\n          const imageUrl = await getDownloadURL(imageRef);\n\n\n        await addDoc(collection(db, \"tweets\"), {\n          content: this.tweetContent,\n          timestamp: serverTimestamp(), // to add a server-generated timestamp\n          imageUrl\n        });\n        } else {\n          await addDoc(collection(db, \"tweets\"), {\n            content: this.tweetContent,\n            timestamp: serverTimestamp()\n          });\n        }\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetImage = null;\n        this.$emit('tweetPosted');\n        this.fetchTweets(); \n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n        onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetImage = file;\n      }\n    }\n  }\n};\n</script>"],"mappings":"AAeA,SAASA,UAAU,EAAEC,GAAE,IAAKC,UAAU,EAAEC,WAAW,EAAEC,cAAa,QAAS,kBAAkB;AAC7F,SAASC,MAAM,EAAEC,UAAS,QAAS,oBAAoB,EAAG;AAC1D,SAASC,eAAc,QAAS,oBAAoB;AACpD,SAASC,EAAC,QAAS,wBAAwB,EAAE;;AAE7C;AACA;;;;;;;;;;;;;;;;;;;AAqBA,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACA,IAAI,IAAI,CAACF,UAAU,EAAE;UACrB,MAAMG,OAAM,GAAId,UAAU,CAAC,CAAC;UAC5B,MAAMe,QAAO,GAAIb,UAAU,CAACY,OAAO,EAAE,SAAQ,GAAI,IAAI,CAACH,UAAU,CAACK,IAAI,CAAC;UACtE,MAAMb,WAAW,CAACY,QAAQ,EAAE,IAAI,CAACJ,UAAU,CAAC;UAC5C,MAAMM,QAAO,GAAI,MAAMb,cAAc,CAACW,QAAQ,CAAC;UAGjD,MAAMV,MAAM,CAACC,UAAU,CAACE,EAAE,EAAE,QAAQ,CAAC,EAAE;YACrCU,OAAO,EAAE,IAAI,CAACR,YAAY;YAC1BS,SAAS,EAAEZ,eAAe,CAAC,CAAC;YAAE;YAC9BU;UACF,CAAC,CAAC;QACF,OAAO;UACL,MAAMZ,MAAM,CAACC,UAAU,CAACE,EAAE,EAAE,QAAQ,CAAC,EAAE;YACrCU,OAAO,EAAE,IAAI,CAACR,YAAY;YAC1BS,SAAS,EAAEZ,eAAe,CAAC;UAC7B,CAAC,CAAC;QACJ;QACA,IAAI,CAACG,YAAW,GAAI,EAAE,EAAE;QACxB,IAAI,CAACC,UAAS,GAAI,IAAI;QACtB,IAAI,CAACS,KAAK,CAAC,aAAa,CAAC;QACzB,IAAI,CAACC,WAAW,CAAC,CAAC;MACpB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACGE,YAAYA,CAACC,CAAC,EAAE;MAClB,MAAMC,IAAG,GAAID,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAIF,IAAI,EAAE;QACR,IAAI,CAACf,UAAS,GAAIe,IAAI;MACxB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}