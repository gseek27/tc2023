{"ast":null,"code":"import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\";\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetMedia: null,\n      mediaType: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        let mediaUrl = null;\n        if (this.tweetMedia) {\n          const storage = getStorage();\n\n          // Adjust pathing to accommodate different media types\n          const mediaRef = storageRef(storage, `${this.mediaType}s/${this.tweetMedia.name}`);\n          await uploadBytes(mediaRef, this.tweetMedia);\n          mediaUrl = await getDownloadURL(mediaRef);\n          console.log('Media URL:', mediaUrl);\n        }\n        const payload = {\n          content: this.tweetContent,\n          timestamp: serverTimestamp()\n        };\n        if (mediaUrl) {\n          payload.mediaUrl = mediaUrl;\n        }\n        await addDoc(collection(db, \"tweets\"), payload);\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetMedia = null;\n        this.$emit('tweetPosted');\n        console.log('Event emitted!');\n        // this.fetchTweets();\n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetMedia = file;\n        if (file.type.startsWith(\"image\")) {\n          this.mediaType = \"image\";\n        } else if (file.type.startsWith(\"video\")) {\n          this.mediaType = \"video\";\n        } else if (file.name.endsWith(\".gif\")) {\n          this.mediaType = \"gif\";\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getStorage","ref","storageRef","uploadBytes","getDownloadURL","addDoc","collection","serverTimestamp","db","data","tweetContent","tweetMedia","mediaType","methods","postTweet","mediaUrl","storage","mediaRef","name","console","log","payload","content","timestamp","$emit","error","onFileChange","e","file","target","files","type","startsWith","endsWith"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetBox.vue"],"sourcesContent":["<template>\n  <div>\n    <v-textarea v-model=\"tweetContent\" placeholder=\"What is happening?!\"></v-textarea>\n    <!-- Accept images, videos, and GIFs -->\n    <input type=\"file\" accept=\"image/*,video/*,.gif\" @change=\"onFileChange\">\n    <v-btn @click=\"postTweet\">Post</v-btn>\n  </div>\n</template>\n\n<script>\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { db } from \"/src/firebase/index.js\";\n\nexport default {\n  data() {\n    return {\n      tweetContent: \"\",\n      tweetMedia: null,\n      mediaType: null\n    };\n  },\n  methods: {\n    async postTweet() {\n      try {\n        let mediaUrl = null;\n\n        if (this.tweetMedia) {\n          const storage = getStorage();\n\n          // Adjust pathing to accommodate different media types\n          const mediaRef = storageRef(storage, `${this.mediaType}s/${this.tweetMedia.name}`);\n\n          await uploadBytes(mediaRef, this.tweetMedia);\n          mediaUrl = await getDownloadURL(mediaRef);\n          console.log('Media URL:', mediaUrl)\n        }\n\n        const payload = {\n          content: this.tweetContent,\n          timestamp: serverTimestamp()\n        };\n\n        if (mediaUrl) {\n          payload.mediaUrl = mediaUrl;\n        }\n\n        await addDoc(collection(db, \"tweets\"), payload);\n\n        this.tweetContent = \"\"; // clear the textarea after posting\n        this.tweetMedia = null;\n        this.$emit('tweetPosted');\n        console.log('Event emitted!')\n       // this.fetchTweets();\n      } catch (error) {\n        console.error(\"Error posting tweet:\", error);\n      }\n    },\n\n    onFileChange(e) {\n      const file = e.target.files[0];\n      if (file) {\n        this.tweetMedia = file;\n        \n        if (file.type.startsWith(\"image\")) {\n          this.mediaType = \"image\";\n        } else if (file.type.startsWith(\"video\")) {\n          this.mediaType = \"video\";\n        } else if (file.name.endsWith(\".gif\")) {\n          this.mediaType = \"gif\";\n        }\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"AAUA,SAASA,UAAU,EAAEC,GAAE,IAAKC,UAAU,EAAEC,WAAW,EAAEC,cAAa,QAAS,kBAAkB;AAC7F,SAASC,MAAM,EAAEC,UAAU,EAAEC,eAAc,QAAS,oBAAoB;AACxE,SAASC,EAAC,QAAS,wBAAwB;AAE3C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,IAAIC,QAAO,GAAI,IAAI;QAEnB,IAAI,IAAI,CAACJ,UAAU,EAAE;UACnB,MAAMK,OAAM,GAAIhB,UAAU,CAAC,CAAC;;UAE5B;UACA,MAAMiB,QAAO,GAAIf,UAAU,CAACc,OAAO,EAAG,GAAE,IAAI,CAACJ,SAAU,KAAI,IAAI,CAACD,UAAU,CAACO,IAAK,EAAC,CAAC;UAElF,MAAMf,WAAW,CAACc,QAAQ,EAAE,IAAI,CAACN,UAAU,CAAC;UAC5CI,QAAO,GAAI,MAAMX,cAAc,CAACa,QAAQ,CAAC;UACzCE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,QAAQ;QACpC;QAEA,MAAMM,OAAM,GAAI;UACdC,OAAO,EAAE,IAAI,CAACZ,YAAY;UAC1Ba,SAAS,EAAEhB,eAAe,CAAC;QAC7B,CAAC;QAED,IAAIQ,QAAQ,EAAE;UACZM,OAAO,CAACN,QAAO,GAAIA,QAAQ;QAC7B;QAEA,MAAMV,MAAM,CAACC,UAAU,CAACE,EAAE,EAAE,QAAQ,CAAC,EAAEa,OAAO,CAAC;QAE/C,IAAI,CAACX,YAAW,GAAI,EAAE,EAAE;QACxB,IAAI,CAACC,UAAS,GAAI,IAAI;QACtB,IAAI,CAACa,KAAK,CAAC,aAAa,CAAC;QACzBL,OAAO,CAACC,GAAG,CAAC,gBAAgB;QAC7B;MACD,EAAE,OAAOK,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDC,YAAYA,CAACC,CAAC,EAAE;MACd,MAAMC,IAAG,GAAID,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAIF,IAAI,EAAE;QACR,IAAI,CAACjB,UAAS,GAAIiB,IAAI;QAEtB,IAAIA,IAAI,CAACG,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;UACjC,IAAI,CAACpB,SAAQ,GAAI,OAAO;QAC1B,OAAO,IAAIgB,IAAI,CAACG,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;UACxC,IAAI,CAACpB,SAAQ,GAAI,OAAO;QAC1B,OAAO,IAAIgB,IAAI,CAACV,IAAI,CAACe,QAAQ,CAAC,MAAM,CAAC,EAAE;UACrC,IAAI,CAACrB,SAAQ,GAAI,KAAK;QACxB;MACF;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}