{"ast":null,"code":"import { getFirestore, doc, deleteDoc } from 'firebase/firestore';\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({}) // Default is now an empty object\n    }\n  },\n\n  methods: {\n    isImage(url) {\n      return /\\.(jpeg|jpg|png)$/i.test(url);\n    },\n    isVideo(url) {\n      return /\\.(mp4|webm|ogg)$/i.test(url); // you can extend this based on the video formats you support\n    },\n\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id)); // \"tweets\" should match your collection name\n        // Optionally emit an event to parent component or show a notification\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["getFirestore","doc","deleteDoc","props","tweetData","type","Object","required","default","methods","isImage","url","test","isVideo","deleteTweet","db","id","$emit","error","console"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetPost.vue"],"sourcesContent":["<template>\n  <div v-if=\"tweetData.content\" class=\"tweet-post\">\n    <v-avatar v-if=\"tweetData.profileImage\">\n      <img :src=\"tweetData.profileImage\">\n    </v-avatar>\n    <strong v-if=\"tweetData.username\">@{{ tweetData.username }}</strong>\n    <p v-if=\"tweetData.content\">{{ tweetData.content }}</p>\n\n    <!-- Display media based on its type -->\n    <v-img v-if=\"isImage(tweetData.imageUrl)\" :src=\"tweetData.imageUrl\" aspect-ratio=\"2\"></v-img>\n    <video v-if=\"isVideo(tweetData.imageUrl)\" controls width=\"100%\">\n      <source :src=\"tweetData.imageUrl\" type=\"video/mp4\">\n      Your browser does not support the video tag.\n    </video>\n\n    <button v-if=\"tweetData.content\" @click=\"deleteTweet\">Delete</button>\n  </div>\n</template>\n\n<script>\nimport { getFirestore, doc, deleteDoc } from 'firebase/firestore';\n\nexport default {\n  props: {\n    tweetData: {\n      type: Object,\n      required: true,\n      default: () => ({})  // Default is now an empty object\n    }\n  },\n  methods: {\n    isImage(url) {\n      return /\\.(jpeg|jpg|png)$/i.test(url);\n    },\n    isVideo(url) {\n      return /\\.(mp4|webm|ogg)$/i.test(url);  // you can extend this based on the video formats you support\n    },\n    async deleteTweet() {\n      try {\n        const db = getFirestore();\n        await deleteDoc(doc(db, \"tweets\", this.tweetData.id)); // \"tweets\" should match your collection name\n        // Optionally emit an event to parent component or show a notification\n        this.$emit('tweetDeleted', this.tweetData.id);\n      } catch (error) {\n        console.error(\"Error deleting tweet:\", error);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.tweet-post {\n  margin-bottom: 90px;\n  border: 1px solid #e0e0e0;\n  padding: 10px;\n  margin-top: 30px;\n  border-radius: 5px;\n}\n.tweet-post button {\n  display: block;\n  background-color: red;\n  color: white;\n}\n</style>\n"],"mappings":"AAoBA,SAASA,YAAY,EAAEC,GAAG,EAAEC,SAAQ,QAAS,oBAAoB;AAEjE,eAAe;EACbC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAEA,CAAA,MAAO,CAAC,CAAC,EAAG;IACvB;EACF,CAAC;;EACDC,OAAO,EAAE;IACPC,OAAOA,CAACC,GAAG,EAAE;MACX,OAAO,oBAAoB,CAACC,IAAI,CAACD,GAAG,CAAC;IACvC,CAAC;IACDE,OAAOA,CAACF,GAAG,EAAE;MACX,OAAO,oBAAoB,CAACC,IAAI,CAACD,GAAG,CAAC,EAAG;IAC1C,CAAC;;IACD,MAAMG,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,EAAC,GAAIf,YAAY,CAAC,CAAC;QACzB,MAAME,SAAS,CAACD,GAAG,CAACc,EAAE,EAAE,QAAQ,EAAE,IAAI,CAACX,SAAS,CAACY,EAAE,CAAC,CAAC,EAAE;QACvD;QACA,IAAI,CAACC,KAAK,CAAC,cAAc,EAAE,IAAI,CAACb,SAAS,CAACY,EAAE,CAAC;MAC/C,EAAE,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}