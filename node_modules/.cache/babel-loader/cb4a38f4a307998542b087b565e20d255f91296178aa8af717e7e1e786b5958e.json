{"ast":null,"code":"import { computed } from 'vue';\nimport TweetPost from './TweetPost.vue';\nimport { getFirestore, doc, updateDoc } from 'firebase/firestore';\nexport default {\n  name: 'TweetsList',\n  components: {\n    TweetPost\n  },\n  props: {\n    tweets: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  setup(props) {\n    console.log(\"Tweets prop in TweetsList:\", props.tweets);\n    const sortedTweets = computed(() => {\n      return [...props.tweets].sort((a, b) => b.timestamp - a.timestamp);\n    });\n    return {\n      sortedTweets\n    };\n  },\n  methods: {\n    async handleLikeToggle(tweetId) {\n      const db = getFirestore();\n      const tweetDocRef = doc(db, 'tweets', tweetId);\n      const tweet = this.tweets.find(t => t.id === tweetId);\n      if (tweet) {\n        tweet.liked = !tweet.liked;\n        // Now, update the Firestore database using the updateDoc method\n        try {\n          await updateDoc(tweetDocRef, {\n            liked: tweet.liked\n          });\n        } catch (error) {\n          console.error('Error updating like status:', error);\n        }\n      }\n    },\n    async handleRepeatToggle(tweetId) {\n      const db = getFirestore();\n      const tweetDocRef = doc(db, 'tweets', tweetId);\n      const tweet = this.tweets.find(t => t.id === tweetId);\n      if (tweet) {\n        tweet.repeatd = !tweet.repeatd;\n        // Now, update the Firestore database using the updateDoc method\n        try {\n          await updateDoc(tweetDocRef, {\n            repeatd: tweet.repeatd\n          });\n        } catch (error) {\n          console.error('Error updating repeat status:', error);\n        }\n      }\n    },\n    handleTweetDeleted(tweetId) {\n      // Emitting an event so parent component can handle it\n      this.$emit('removeTweet', tweetId);\n    }\n  }\n};","map":{"version":3,"names":["computed","TweetPost","getFirestore","doc","updateDoc","name","components","props","tweets","type","Array","required","default","setup","console","log","sortedTweets","sort","a","b","timestamp","methods","handleLikeToggle","tweetId","db","tweetDocRef","tweet","find","t","id","liked","error","handleRepeatToggle","repeatd","handleTweetDeleted","$emit"],"sources":["/Users/kharelthompson/Coding/tc23/src/components/TweetsList.vue"],"sourcesContent":["<template>\n  <div>\n     <div v-for=\"tweet in sortedTweets\" :key=\"tweet.id\">\n     <TweetPost v-if=\"tweet.content\" \n  :tweetData=\"tweet\"\n  @likeToggled=\"handleLikeToggle\"\n  @repeatToggled=\"handleRepeatToggle\"\n  :userId=\"tweet.userId\" \n  @tweetDeleted=\"handleTweetDeleted\"\n/>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed } from 'vue';\nimport TweetPost from './TweetPost.vue';\nimport { getFirestore, doc, updateDoc } from 'firebase/firestore';\n\n\nexport default {\n  name: 'TweetsList',\n  components: {\n    TweetPost\n  },\n  props: {\n    tweets: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  setup(props) {\n        console.log(\"Tweets prop in TweetsList:\", props.tweets);\n    const sortedTweets = computed(() => {\n      return [...props.tweets].sort((a, b) => b.timestamp - a.timestamp);\n    });\n\n    return {\n      sortedTweets\n    };\n  },\n  methods: {\n    async handleLikeToggle(tweetId) {\n    const db = getFirestore();\n    const tweetDocRef = doc(db, 'tweets', tweetId);\n    \n    const tweet = this.tweets.find(t => t.id === tweetId);\n    if (tweet) {\n      tweet.liked = !tweet.liked;\n      // Now, update the Firestore database using the updateDoc method\n      try {\n        await updateDoc(tweetDocRef, { liked: tweet.liked });\n      } catch (error) {\n        console.error('Error updating like status:', error);\n      }\n    }\n  },\n\n  async handleRepeatToggle(tweetId) {\n    const db = getFirestore();\n    const tweetDocRef = doc(db, 'tweets', tweetId);\n    \n    const tweet = this.tweets.find(t => t.id === tweetId);\n    if (tweet) {\n      tweet.repeatd = !tweet.repeatd;\n      // Now, update the Firestore database using the updateDoc method\n      try {\n        await updateDoc(tweetDocRef, { repeatd: tweet.repeatd });\n      } catch (error) {\n        console.error('Error updating repeat status:', error);\n      }\n    }\n  },\n    handleTweetDeleted(tweetId) {\n      // Emitting an event so parent component can handle it\n      this.$emit('removeTweet', tweetId);\n    }\n  }\n};\n</script>\n"],"mappings":"AAgBA,SAASA,QAAO,QAAS,KAAK;AAC9B,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,SAASC,YAAY,EAAEC,GAAG,EAAEC,SAAQ,QAAS,oBAAoB;AAGjE,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACVL;EACF,CAAC;EACDM,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAEA,CAAA,KAAM;IACjB;EACF,CAAC;EACDC,KAAKA,CAACN,KAAK,EAAE;IACPO,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAER,KAAK,CAACC,MAAM,CAAC;IAC3D,MAAMQ,YAAW,GAAIhB,QAAQ,CAAC,MAAM;MAClC,OAAO,CAAC,GAAGO,KAAK,CAACC,MAAM,CAAC,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,SAAQ,GAAIF,CAAC,CAACE,SAAS,CAAC;IACpE,CAAC,CAAC;IAEF,OAAO;MACLJ;IACF,CAAC;EACH,CAAC;EACDK,OAAO,EAAE;IACP,MAAMC,gBAAgBA,CAACC,OAAO,EAAE;MAChC,MAAMC,EAAC,GAAItB,YAAY,CAAC,CAAC;MACzB,MAAMuB,WAAU,GAAItB,GAAG,CAACqB,EAAE,EAAE,QAAQ,EAAED,OAAO,CAAC;MAE9C,MAAMG,KAAI,GAAI,IAAI,CAAClB,MAAM,CAACmB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMN,OAAO,CAAC;MACrD,IAAIG,KAAK,EAAE;QACTA,KAAK,CAACI,KAAI,GAAI,CAACJ,KAAK,CAACI,KAAK;QAC1B;QACA,IAAI;UACF,MAAM1B,SAAS,CAACqB,WAAW,EAAE;YAAEK,KAAK,EAAEJ,KAAK,CAACI;UAAM,CAAC,CAAC;QACtD,EAAE,OAAOC,KAAK,EAAE;UACdjB,OAAO,CAACiB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF,CAAC;IAED,MAAMC,kBAAkBA,CAACT,OAAO,EAAE;MAChC,MAAMC,EAAC,GAAItB,YAAY,CAAC,CAAC;MACzB,MAAMuB,WAAU,GAAItB,GAAG,CAACqB,EAAE,EAAE,QAAQ,EAAED,OAAO,CAAC;MAE9C,MAAMG,KAAI,GAAI,IAAI,CAAClB,MAAM,CAACmB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMN,OAAO,CAAC;MACrD,IAAIG,KAAK,EAAE;QACTA,KAAK,CAACO,OAAM,GAAI,CAACP,KAAK,CAACO,OAAO;QAC9B;QACA,IAAI;UACF,MAAM7B,SAAS,CAACqB,WAAW,EAAE;YAAEQ,OAAO,EAAEP,KAAK,CAACO;UAAQ,CAAC,CAAC;QAC1D,EAAE,OAAOF,KAAK,EAAE;UACdjB,OAAO,CAACiB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACvD;MACF;IACF,CAAC;IACCG,kBAAkBA,CAACX,OAAO,EAAE;MAC1B;MACA,IAAI,CAACY,KAAK,CAAC,aAAa,EAAEZ,OAAO,CAAC;IACpC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}